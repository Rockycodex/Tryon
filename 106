// Define the metrics, label and weights
// metric ranges from 0-10.
// metric value could be 0, 2, 5, 7, 10
const metrics = {
  build: {
    jenkins: 10,
    automaticDeployment: 5,
    apiLint: 5,
    unitTest: 2,
  },
  test: {
    integrationTest: 0,
    functionalTest: 5,
    e2eTest: 7,
    performanceTest: 10,
  },
};

// Define the scoring scale
// scale ranges from 1 to 5
const scoringScale = {
  build: {
    jenkins: 1,
    automaticDeployment: 1,
    apiLint: 1,
    unitTest: 2,
  },
  test: {
    integrationTest: 2,
    functionalTest: 2,
    e2eTest: 2,
    performanceTest: 3,
  },
};

// Define the scoring labels and their weights
const labels = {
  not_implemented: 0,
  low: 20,
  below_average: 40,
  above_average: 60,
  high: 80,
  perfect: 100,
};

// Function to calculate score for a metric
function calculateMetricScore(metricValue, scaleValue) {
  const score = metricValue * scaleValue;
  return score.toFixed(2);
}

// Function to calculate overall score for all metrics
function calculateOverallScore(metrics, scoringScale) {
  let metricScores = {};
  let metricWeights = {};
  let overallScore = 0;

  // Calculate scores for each metric
  for (const category in metrics) {
    for (const metric in metrics[category]) {
      const metricValue = metrics[category][metric];
      const scaleValue = scoringScale[category][metric];
      const score = calculateMetricScore(metricValue, scaleValue);

      // Store the score and weight for each metric
      metricScores[metric] = score;
      metricWeights[metric] = scaleValue;
    }
  }

  // Calculate overall score
  let totalScore = 0;
  let totalWeight = 0;
  for (const metric in metricScores) {
    const score = metricScores[metric];
    const weight = metricWeights[metric];
    totalScore += score * weight;
    totalWeight += weight;
  }

  overallScore = (totalScore / totalWeight).toFixed(2);

  // Calculate labels for each metric
  let metricLabels = {};
  for (const category in metrics) {
    for (const metric in metrics[category]) {
      const score = metricScores[metric];
      const weight = metricWeights[metric];
      const labelWeight = Math.floor((score / weight) * 100);
      let label = '';
      for (const key in labels) {
        if (labelWeight <= labels[key]) {
          label = key;
          break;
        }
      }
      metricLabels[metric] = { score, label };
    }
  }

  // Return the overall score and metric labels
  return { overallScore, metricLabels };
}

// Call the function to calculate the overall score and metric labels
const result = calculateOverallScore(metrics, scoringScale);

// Print the result
console.log(JSON.stringify(result, null, 2));
